// Production-ready Prisma schema for Vercel deployment
// Supports both PostgreSQL (recommended) and MySQL

generator client {
  provider = "prisma-client-js"
}

// For PostgreSQL (Vercel Postgres, Supabase)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// For MySQL (PlanetScale) - uncomment this and comment PostgreSQL above
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
//   relationMode = "prisma"
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?   @db.Text
  location      String?
  website       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  
  // Nova-specific fields
  watchLater    Json      @default("[]")
  preferences   Json      @default("{}")
  
  @@index([email])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
